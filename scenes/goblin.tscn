[gd_scene load_steps=32 format=3 uid="uid://dbvnlcr5mg4gy"]

[ext_resource type="Texture2D" uid="uid://ju04e4o5k7yl" path="res://assets/enemy/goblin/Goblin King Sprite Sheet.png" id="1_frw1u"]

[sub_resource type="GDScript" id="GDScript_2pgk0"]
script/source = "
extends StaticBody2D

# --- Export Variables ---
@export var max_hp: int = 60
@export var attack_power: int = 15
@export var detection_range: float = 80.0
@export var attack_range: float = 40.0
@export var attack_cooldown: float = 2.0
@export var experience_drop: int = 20

@onready var animated_sprite: AnimatedSprite2D = $AnimatedSprite2D
@onready var detection_area: Area2D = $Area2D
@onready var attack_hitbox: Area2D = $AttackHitbox

var current_hp: int
var player_target: CharacterBody2D = null
var can_attack: bool = true
var is_attacking: bool = false
var facing_direction: Vector2 = Vector2.RIGHT
var is_player_in_detection: bool = false

func _ready():
	add_to_group(\"enemies\")
	current_hp = max_hp
	

	if detection_area:
		detection_area.body_entered.connect(_on_detection_area_body_entered)
		detection_area.body_exited.connect(_on_detection_area_body_exited)
	
	if attack_hitbox:
		attack_hitbox.monitoring = false
	
	if animated_sprite:
		animated_sprite.animation_finished.connect(_on_animation_finished)
		animated_sprite.play(\"idle_right\")
	
	print(name, \" StaticGoblin initialized, HP:\", current_hp, \" Attack Power:\", attack_power)


func _process(_delta: float):
	# Check player status
	if player_target and player_target.has_method(\"is_dead\") and player_target.is_dead():
		_reset_target()
		return
	
	# Active attack logic
	if player_target and is_player_in_detection and can_attack and not is_attacking:
		var distance_to_player = global_position.distance_to(player_target.global_position)
		
		if distance_to_player <= attack_range:
			_perform_attack()
	
	# Update facing direction
	if player_target:
		_update_facing_direction()

func _update_facing_direction():

	if not player_target or not animated_sprite:
		return
	
	var direction_to_player = global_position.direction_to(player_target.global_position)
	facing_direction = direction_to_player
	
	# Only update animation flip
	if not is_attacking:
		animated_sprite.flip_h = facing_direction.x < 0
		if not animated_sprite.is_playing() or animated_sprite.animation != \"idle_right\":
			animated_sprite.play(\"idle_right\")

func _perform_attack():

	if is_attacking or not can_attack or not player_target:
		return
	
	is_attacking = true
	can_attack = false
	
	print(name, \" Start attacking player\")
	
	# Play attack animation
	if animated_sprite and animated_sprite.sprite_frames.has_animation(\"attack_right\"):
		animated_sprite.play(\"attack_right\")
		animated_sprite.flip_h = facing_direction.x < 0
	
	# Set attack hitbox
	_setup_attack_hitbox()
	
	# Create attack timing
	_handle_attack_timing()

func _handle_attack_timing():
	# Wait for attack timing
	await get_tree().create_timer(0.3).timeout
	
	if not is_attacking:
		return
	
	# Execute attack hitbox
	_execute_attack()
	
	# Attack cooldown
	await get_tree().create_timer(attack_cooldown).timeout
	
	# Reset attack state
	_reset_attack_state()

func _setup_attack_hitbox():
	if not attack_hitbox:
		return
	
	var attack_offset = facing_direction.normalized() * 20.0
	attack_hitbox.position = attack_offset
	attack_hitbox.monitoring = true

func _execute_attack():
	if not attack_hitbox or not player_target:
		return
	
	if player_target.has_method(\"is_dead\") and player_target.is_dead():
		attack_hitbox.monitoring = false
		return
	
	var hit_targets = attack_hitbox.get_overlapping_bodies()
	var hit_player = false
	
	for body in hit_targets:
		if body == player_target and body.has_method(\"take_damage\"):
			var distance = global_position.distance_to(body.global_position)
			if distance <= attack_range * 1.2:
				body.take_damage(attack_power)
				hit_player = true
				print(name, \" Attack hit player, causing\", attack_power, \"damage\")
				break
	
	# Backup attack detection
	if not hit_player and player_target:
		var distance = global_position.distance_to(player_target.global_position)
		if distance <= attack_range and player_target.has_method(\"take_damage\"):
			if not (player_target.has_method(\"is_dead\") and player_target.is_dead()):
				player_target.take_damage(attack_power)
				hit_player = true
				print(name, \" 备用攻击检测命中\")
	
	if not hit_player:
		print(name, \" 攻击未命中\")
	
	attack_hitbox.monitoring = false

func _reset_attack_state():
	\"\"\"重置攻击状态\"\"\"
	is_attacking = false
	can_attack = true
	
	if attack_hitbox:
		attack_hitbox.monitoring = false
	
	if animated_sprite:
		animated_sprite.play(\"idle_right\")
		if player_target:
			animated_sprite.flip_h = facing_direction.x < 0

# ============================================================================
# 伤害系统
# ============================================================================
func receive_player_attack(player_attack_power: int) -> int:
	\"\"\"接收玩家攻击\"\"\"
	if current_hp <= 0:
		return 0
	
	var actual_damage = player_attack_power
	current_hp -= actual_damage
	print(name, \" 受到玩家攻击\", actual_damage, \"点伤害，剩余HP:\", current_hp)
	
	_play_hit_feedback()
	
	if current_hp <= 0:
		_handle_death()
	else:
		# 受击后反击
		if player_target and can_attack and not is_attacking:
			var distance = global_position.distance_to(player_target.global_position)
			if distance <= attack_range * 1.5:
				print(name, \" 受击后反击\")
				call_deferred(\"_perform_attack\")
	
	return actual_damage

func _play_hit_feedback():
	\"\"\"播放受击反馈效果\"\"\"
	if not animated_sprite:
		return
	
	var original_modulate = animated_sprite.modulate
	animated_sprite.modulate = Color.RED
	
	await get_tree().create_timer(0.15).timeout
	
	if animated_sprite:
		animated_sprite.modulate = original_modulate

func take_damage(amount: int):
	\"\"\"通用伤害接口\"\"\"
	if current_hp <= 0:
		return
	
	current_hp -= amount
	print(name, \" 受到\", amount, \"点伤害，剩余HP:\", current_hp)
	
	_play_hit_feedback()
	
	if current_hp <= 0:
		_handle_death()

func _handle_death():
	\"\"\"处理死亡\"\"\"
	print(name, \" StaticGoblin死亡\")
	
	is_attacking = false
	can_attack = false
	
	# 禁用碰撞
	var collision_shape = $CollisionShape2D
	if collision_shape:
		collision_shape.disabled = true
	
	# 停用检测区域
	if detection_area:
		detection_area.monitoring = false
	
	if attack_hitbox:
		attack_hitbox.monitoring = false
	
	# 播放死亡动画
	if animated_sprite and animated_sprite.sprite_frames.has_animation(\"death\"):
		animated_sprite.play(\"death\")
	else:
		_cleanup()

func _cleanup():
	\"\"\"清理并给玩家经验\"\"\"
	var player_node = get_tree().get_first_node_in_group(\"player\")
	if player_node and player_node.has_method(\"gain_experience\"):
		player_node.gain_experience(experience_drop)
		print(\"玩家获得经验:\", experience_drop)
	
	queue_free()

# ============================================================================
# 检测系统
# ============================================================================
func _on_detection_area_body_entered(body):
	\"\"\"玩家进入检测范围\"\"\"
	if body.is_in_group(\"player\"):
		print(name, \" 检测到玩家进入范围:\", body.name)
		player_target = body
		is_player_in_detection = true
		_update_facing_direction()

func _on_detection_area_body_exited(body):
	\"\"\"玩家离开检测范围\"\"\"
	if body == player_target:
		print(name, \" 玩家离开检测范围\")
		is_player_in_detection = false
		# 保持警戒状态一段时间
		await get_tree().create_timer(3.0).timeout
		if not is_player_in_detection:
			_reset_target()

func _reset_target():
	\"\"\"重置目标\"\"\"
	player_target = null
	is_player_in_detection = false
	
	facing_direction = Vector2.RIGHT
	if animated_sprite and not is_attacking:
		animated_sprite.flip_h = false
		animated_sprite.play(\"idle_right\")

# ============================================================================
# 动画回调
# ============================================================================
func _on_animation_finished():
	\"\"\"动画完成回调\"\"\"
	if not animated_sprite:
		return
		
	if animated_sprite.animation == \"death\":
		_cleanup()
	elif animated_sprite.animation == \"attack_right\":
		# 攻击动画完成，状态由_handle_attack_timing管理
		pass
"

[sub_resource type="AtlasTexture" id="AtlasTexture_1b41l"]
atlas = ExtResource("1_frw1u")
region = Rect2(0, 576, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_3u6ep"]
atlas = ExtResource("1_frw1u")
region = Rect2(64, 576, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_t55vk"]
atlas = ExtResource("1_frw1u")
region = Rect2(128, 576, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_wfmhx"]
atlas = ExtResource("1_frw1u")
region = Rect2(192, 576, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_la0ef"]
atlas = ExtResource("1_frw1u")
region = Rect2(256, 576, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_slexr"]
atlas = ExtResource("1_frw1u")
region = Rect2(320, 576, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_iwcct"]
atlas = ExtResource("1_frw1u")
region = Rect2(0, 640, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_313bl"]
atlas = ExtResource("1_frw1u")
region = Rect2(64, 640, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_v6ior"]
atlas = ExtResource("1_frw1u")
region = Rect2(128, 640, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_5u5bg"]
atlas = ExtResource("1_frw1u")
region = Rect2(192, 640, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_augvj"]
atlas = ExtResource("1_frw1u")
region = Rect2(256, 640, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_ftfea"]
atlas = ExtResource("1_frw1u")
region = Rect2(320, 640, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_7r5gn"]
atlas = ExtResource("1_frw1u")
region = Rect2(384, 640, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_pre21"]
atlas = ExtResource("1_frw1u")
region = Rect2(0, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_bebv6"]
atlas = ExtResource("1_frw1u")
region = Rect2(64, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_hy646"]
atlas = ExtResource("1_frw1u")
region = Rect2(128, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_gps6k"]
atlas = ExtResource("1_frw1u")
region = Rect2(192, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_p0qoa"]
atlas = ExtResource("1_frw1u")
region = Rect2(256, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_h005x"]
atlas = ExtResource("1_frw1u")
region = Rect2(320, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_xconc"]
atlas = ExtResource("1_frw1u")
region = Rect2(384, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_4n56o"]
atlas = ExtResource("1_frw1u")
region = Rect2(448, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_kjn2s"]
atlas = ExtResource("1_frw1u")
region = Rect2(512, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_rua4y"]
atlas = ExtResource("1_frw1u")
region = Rect2(576, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_qlm6o"]
atlas = ExtResource("1_frw1u")
region = Rect2(640, 192, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_weuyf"]
atlas = ExtResource("1_frw1u")
region = Rect2(704, 192, 64, 64)

[sub_resource type="SpriteFrames" id="SpriteFrames_ye8qr"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1b41l")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3u6ep")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_t55vk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wfmhx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_la0ef")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_slexr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_iwcct")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_313bl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_v6ior")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5u5bg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_augvj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ftfea")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7r5gn")
}],
"loop": true,
"name": &"attack_right",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pre21")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_bebv6")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hy646")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gps6k")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_p0qoa")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_h005x")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xconc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4n56o")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kjn2s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rua4y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qlm6o")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_weuyf")
}],
"loop": true,
"name": &"idle_right",
"speed": 5.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_saho2"]
radius = 13.0
height = 36.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_jhdec"]
size = Vector2(39, 47)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_3rc4d"]
size = Vector2(33, 40.75)

[node name="Goblin" type="StaticBody2D"]
collision_layer = 2
collision_mask = 0
script = SubResource("GDScript_2pgk0")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_ye8qr")
animation = &"idle_right"
frame_progress = 0.524052

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(1, 12)
shape = SubResource("CapsuleShape2D_saho2")

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2(0.5, 12.5)
shape = SubResource("RectangleShape2D_jhdec")

[node name="AttackHitbox" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="AttackHitbox"]
position = Vector2(0.5, 11.625)
shape = SubResource("RectangleShape2D_3rc4d")
